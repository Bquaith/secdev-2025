name: ci

on:
  push:
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      VAR_1: ${{ secrets.MY_SECRET_KEY }}
      TZ: Europe/Berlin
    steps:
      - name: Prepare EVIDENCE dir & CI_LOG
        run: |
          mkdir -p EVIDENCE/S08
          export CI_LOG=EVIDENCE/ci-$(date +'%Y-%m-%d')-build.txt
          echo "CI build log — $(date +'%Y-%m-%dT%H:%M:%S%:z')" > "${CI_LOG}"
          echo "Repository: $GITHUB_REPOSITORY" >> "${CI_LOG}"
          echo "Workflow: $GITHUB_WORKFLOW (run id: $GITHUB_RUN_ID)" >> "${CI_LOG}"
          echo "---" >> "${CI_LOG}"
          echo "Prepared EVIDENCE and CI_LOG=${CI_LOG}" >> "${CI_LOG}"
        shell: bash

      - name: Checkout
        uses: actions/checkout@v4

      - name: Show non-secret status
        run: |
          if [ -z "$VAR_1" ]; then
            echo "VAR_1 is empty"
            exit 1
          else
            echo "VAR_1 is set -> yes"
          fi

      - name: Save secret to file for app
        run: |
          printf '%s' "$VAR_1" > secret-for-app.txt
          ls -l secret-for-app.txt

      - name: Explicitly mask secret (extra safety)
        run: |
          echo "::add-mask::$VAR_1"

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps (and test helpers) — log to CI_LOG
        run: |
          CI_LOG=EVIDENCE/ci-$(date +'%Y-%m-%d')-build.txt
          printf "%s Install deps START\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" >> "$CI_LOG"
          # Install project deps then ensure pytest-html & pytest-cov are available
          pip install -r requirements.txt >> "$CI_LOG" 2>&1 || { cat "$CI_LOG"; exit 1; }
          pip install pytest pytest-cov pytest-html coverage >> "$CI_LOG" 2>&1 || { cat "$CI_LOG"; exit 1; }
          printf "%s Install deps END\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" >> "$CI_LOG"
        shell: bash

      - name: Capture pip freeze
        run: |
          pip freeze > EVIDENCE/pip-freeze.txt
          echo "pip freeze saved" >> EVIDENCE/ci-$(date +'%Y-%m-%d')-build.txt
        shell: bash

      - name: Init DB (log to CI_LOG)
        run: |
          CI_LOG=EVIDENCE/ci-$(date +'%Y-%m-%d')-build.txt
          printf "%s Init DB START\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" >> "$CI_LOG"
          python scripts/init_db.py >> "$CI_LOG" 2>&1
          ret=$?
          printf "%s Init DB END exit=%d\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" $ret >> "$CI_LOG"
          if [ $ret -ne 0 ]; then cat "$CI_LOG"; exit $ret; fi
        shell: bash

      - name: Run tests — junitxml, pytest-html and coverage (HTML + XML)
        run: |
          CI_LOG=EVIDENCE/ci-$(date +'%Y-%m-%d')-build.txt
          printf "%s Pytest START\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" >> "$CI_LOG"

          mkdir -p EVIDENCE/S08
          # Run pytest: produce junitxml, html report (self-contained) and coverage html+xml into EVIDENCE
          pytest -q \
            --junitxml=EVIDENCE/S08/test-report.xml \
            --html=EVIDENCE/pytest-report.html --self-contained-html \
            --cov=. --cov-report=html:EVIDENCE/coverage-html --cov-report=xml:EVIDENCE/coverage.xml \
            >> "$CI_LOG" 2>&1

          ret=$?
          printf "%s Pytest END exit=%d\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" $ret >> "$CI_LOG"

          if [ $ret -ne 0 ]; then
            echo "pytest failed (exit $ret). junitxml at EVIDENCE/S08/test-report.xml" >> "$CI_LOG"
            # show small tail of log to help debugging
            tail -n 200 "$CI_LOG" || true
            exit $ret
          fi
        shell: bash

      - name: Create reports index (easy navigation in artifacts)
        run: |
          cat > EVIDENCE/reports-index.html <<'HTML'
          <!doctype html>
          <html>
            <head><meta charset="utf-8"><title>CI Reports Index</title></head>
            <body>
              <h1>CI Reports</h1>
              <ul>
                <li><a href="./pytest-report.html">Pytest HTML report</a></li>
                <li><a href="./S08/test-report.xml">Pytest JUnit XML (S08)</a></li>
                <li><a href="./coverage-html/index.html">Coverage HTML report</a></li>
                <li><a href="./pip-freeze.txt">pip-freeze.txt</a></li>
                <li><a href="./package-notes.txt">package-notes.txt</a></li>
                <li><a href="./ci-$(date +'%Y-%m-%d')-build.txt">ci log</a></li>
              </ul>
            </body>
          </html>
          HTML
        shell: bash

      - name: Build packages (optional) and collect package notes
        run: |
          CI_LOG=EVIDENCE/ci-$(date +'%Y-%m-%d')-build.txt
          printf "%s Collect package-notes START\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" >> "$CI_LOG"
          echo "Built-on: runner ubuntu-latest, python 3.11" > EVIDENCE/package-notes.txt
          if [ -d dist ] && [ "$(ls -A dist)" ]; then
            echo "Found artifacts in dist/:" >> EVIDENCE/package-notes.txt
            for f in dist/*; do
              sha=$(sha256sum "$f" | awk '{print $1}')
              size=$(stat -c%s "$f" || stat -f%z "$f")
              echo "$(basename "$f")  size=$size  sha256=$sha" >> EVIDENCE/package-notes.txt
            done
          else
            echo "No dist/ artifacts found. If you want packages, add a step to run: python -m build" >> EVIDENCE/package-notes.txt
          fi
          printf "%s Collect package-notes END\n" "$(date +'%Y-%m-%dT%H:%M:%S%:z')" >> "$CI_LOG"
        shell: bash

      - name: Create local-build placeholder
        run: |
          echo "Local build log — $(date +'%Y-%m-%d')" > EVIDENCE/local-build-$(date +'%Y-%m-%d').txt
          echo "(placeholder)" >> EVIDENCE/local-build-$(date +'%Y-%m-%d').txt

      - name: Quick secrets grep -> EVIDENCE/grep-secrets.txt
        run: |
          mkdir -p EVIDENCE
          git grep -nE -o 'AKIA|SECRET|api[_-]?key|api[_-]?token|token=|password=|passwd|MY_SECRET_KEY|VAR_1' > EVIDENCE/grep-secrets.txt || true
          
          lines=$(wc -l < EVIDENCE/grep-secrets.txt 2>/dev/null || echo 0)
          echo "grep saved: $lines lines" >> EVIDENCE/ci-$(date +'%Y-%m-%d')-build.txt          
          echo "(placeholder)" >> EVIDENCE/grep-secrets.txt
        shell: bash

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evidence-s08
          path: |
            EVIDENCE/**
          if-no-files-found: warn
